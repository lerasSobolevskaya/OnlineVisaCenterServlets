var carrousels = {};
var carrouselsvar = {
	duration : 5000,
	help : "Access other panels via the arrow keys, press the Enter key to go to the current new or press the delete key to clear this message. / AccÃ©der aux autres panneaux via les flÃ¨ches directionnelles, appuyez sur la touche entrÃ©e pour vous rendre sur le panneau courant ou appuyez sur la touche supprimer pour annuler ce message."
};
var carrouselssrc = {
	selectedtab : [ "/fv-fo-portal-inf-theme/images/mae/notselected.png",
			"/fv-fo-portal-inf-theme/images/mae/selected.png" ],
	previoustab : [ "/fv-fo-portal-inf-theme/images/mae/previousdisabled.png",
			"/fv-fo-portal-inf-theme/images/mae/previous.png" ],
	nexttab : [ "/fv-fo-portal-inf-theme/images/mae/nextdisabled.png",
			"/fv-fo-portal-inf-theme/images/mae/next.png" ]
};
var carrouselstxt = {
	playpause : [ "Replay below / Relancer ci-aprÃ¨s ",
			"Stop below / ArrÃªter ci-aprÃ¨s" ],
	previoustab : [ "No previous item / Aucun item prÃ©cÃ©dent",
			"Previous item / Item prÃ©cÃ©dent" ],
	nexttab : [ "No next item / Aucun item suivant", "Next item / Item suivant" ]
};
function createCarrousel(c) {
	if (!c.hasAttribute("id")) {
		c.setAttribute("id", getAvailableId("carrousel"))
	}
	c
			.addEventListener(
					"click",
					function(i) {
						var f = i.target;
						while ([ "li", "button" ].indexOf(f.tagName
								.toLowerCase()) == -1
								&& f != c) {
							f = f.parentNode
						}
						if (f != c) {
							var F = (f.matches || f.mozMatchesSelector
									|| f.msMatchesSelector || f.webkitMatchesSelector);
							F = F.name
									|| F.toString().match(
											/^\s*function\s*(\S*)\s*\(/)[1];
							if (f[F]("#" + this.getAttribute("id")
									+ ' > ol[role="tablist"] > li[role="tab"]')
									|| f[F]
											("#"
													+ this.getAttribute("id")
													+ " > p.carrousel-previousitem button, #"
													+ this.getAttribute("id")
													+ " > p.carrousel-nextitem button")) {
								this.removeAttribute("data-reverse")
							}
						}
					}, false);
	var r = document.querySelectorAll("#" + c.getAttribute("id")
			+ " > div .article");
	var B = document.createElement("ol");
	B.setAttribute("role", "tablist");
	c.insertBefore(B, c.firstChild);
	var D = null;
	if (c.getAttribute("data-help") == "true") {
		D = document.createElement("p");
		D.setAttribute("id", c.getAttribute("id") + "-tooltip");
		D.setAttribute("role", "tooltip");
		D.setAttribute("hidden", "hidden");
		D.appendChild(document.createTextNode(carrouselsvar.help));
		B.addEventListener("keydown", deleteCarrouselHelp, false)
	}
	var E = c.getAttribute("data-selectedpanel");
	if (E == "last") {
		E = r.length - 1
	} else {
		if (E >= 1 && E <= r.length) {
			E = E - 1
		} else {
			E = 0
		}
	}
	var A = document.createElement("div");
	for (var w = 0; w < r.length; w++) {
		if (!r[w].hasAttribute("id")) {
			r[w].setAttribute("id", getAvailableId("tabpanel"))
		}
		var d = document.createElement("li");
		d
				.setAttribute(
						c.getAttribute("data-ariacontrols") == "false" ? "data-controls"
								: "aria-controls", r[w].getAttribute("id"));
		d.setAttribute("role", "tab");
		var h = r[w].querySelector('[role="heading"], h1, h2, h3, h4, h5, h6');
		if (w == E) {
			r[w].setAttribute("aria-hidden", "false");
			d.setAttribute("aria-selected", "true");
			d.setAttribute("tabindex", "0")
		} else {
			r[w].setAttribute("aria-hidden", "true");
			d.setAttribute("aria-selected", "false");
			d.setAttribute("tabindex", "-1")
		}
		if (c.getAttribute("data-tabs") == "text") {
			d.setAttribute("aria-label", h.textContent);
			var v = document.createElement("span");
			v.setAttribute("title", d.getAttribute("aria-label"));
			v.appendChild(document.createTextNode(w + 1));
			d.appendChild(v)
		} else {
			var t = document.createElement("img");
			t.setAttribute("src", carrouselssrc.selectedtab[(w == E ? 1 : 0)]);
			t.setAttribute("alt", h.textContent);
			t.setAttribute("height", "28");
			t.setAttribute("width", "28");
			t.setAttribute("title", t.getAttribute("alt"));
			d.appendChild(t)
		}
		if (w > 0) {
			var j = r[w]
					.querySelectorAll('a, area, button, input, select, textarea, [contenteditable="true"], [tabindex]');
			for (var z = 0; z < j.length; z++) {
				if (j[z].hasAttribute("contenteditable")) {
					j[z].setAttribute("data-contenteditable", "true");
					j[z].removeAttribute("contenteditable")
				}
				if (j[z].hasAttribute("tabindex")) {
					j[z].setAttribute("data-tabindex", j[z]
							.getAttribute("tabindex"))
				}
				j[z].setAttribute("tabindex", "-1")
			}
		}
		d.setAttribute("id", getAvailableId("tab"));
		if (D) {
			d.setAttribute("aria-describedby", D.getAttribute("id"));
			d.addEventListener("mousedown", carrouselHelpTabMouseDown, false);
			d.addEventListener("keydown", carrouselHelpTabKeyDown, false);
			d.addEventListener("focus", carrouselHelpTabFocus, false);
			d.addEventListener("blur", carrouselHelpTabBlur, false)
		}
		d
				.addEventListener(
						"click",
						function(F) {
							if (this.getAttribute("aria-selected") == "false") {
								if (!(this.parentNode.parentNode
										.getAttribute("data-navbuttons") == "false")) {
									var G = this.parentNode.nextSibling;
									while (G.nodeType != 1) {
										G = G.nextSibling
									}
									G = G.firstChild;
									if (!this.previousSibling) {
										G.setAttribute("disabled", "disabled");
										G.firstChild.setAttribute("alt",
												carrouselstxt.previoustab[0]);
										G.firstChild.setAttribute("src",
												carrouselssrc.previoustab[0]);
										G.firstChild.setAttribute("id",
												"previoustab");
										G.firstChild.setAttribute("title",
												G.firstChild
														.getAttribute("alt"))
									} else {
										G.removeAttribute("disabled");
										var L = this.previousSibling.firstChild;
										if (L.tagName.toLowerCase() == "img") {
											L = L.getAttribute("alt")
										} else {
											L = L.parentNode
													.getAttribute("aria-label")
										}
										G.firstChild.setAttribute("alt", L
												+ ", "
												+ carrouselstxt.previoustab[1]
														.toLowerCase());
										G.firstChild.setAttribute("src",
												carrouselssrc.previoustab[1]);
										G.firstChild.setAttribute("id",
												"previoustab");
										G.firstChild.setAttribute("title",
												G.firstChild
														.getAttribute("alt"))
									}
									var P = this.parentNode.parentNode.lastChild;
									if (P.getAttribute("role") == "tooltip") {
										P = P.previousSibling
									}
									P = P.firstChild;
									if (!this.nextSibling) {
										P.setAttribute("disabled", "disabled");
										P.firstChild.setAttribute("alt",
												carrouselstxt.nexttab[0]);
										P.firstChild.setAttribute("src",
												carrouselssrc.nexttab[0]);
										P.firstChild.setAttribute("id",
												"nexttab");
										P.firstChild.setAttribute("title",
												P.firstChild
														.getAttribute("alt"))
									} else {
										P.removeAttribute("disabled");
										var L = this.nextSibling.firstChild;
										if (L.tagName.toLowerCase() == "img") {
											L = L.getAttribute("alt")
										} else {
											L = L.parentNode
													.getAttribute("aria-label")
										}
										P.firstChild.setAttribute("alt", L
												+ ", "
												+ carrouselstxt.nexttab[1]
														.toLowerCase());
										P.firstChild.setAttribute("src",
												carrouselssrc.nexttab[1]);
										P.firstChild.setAttribute("id",
												"nexttab");
										P.firstChild.setAttribute("title",
												P.firstChild
														.getAttribute("alt"))
									}
								}
								var O = this.parentNode;
								var H = 0;
								for (var K = 0; K < O.childNodes.length; K++) {
									H++;
									if (O.childNodes[K] == this) {
										break
									}
								}
								var S = O.nextSibling;
								while (S.nodeType != 1
										|| (S.tagName && S.tagName
												.toLowerCase() != "div")) {
									S = S.nextSibling
								}
								S.setAttribute("class", O.parentNode
										.getAttribute("id")
										+ "-" + H);
								var J = this.parentNode
										.querySelector('[aria-selected="true"]');
								if (!O.parentNode.getAttribute("data-tabs")
										|| O.parentNode
												.getAttribute("data-tabs") == "dots") {
									J.firstChild.setAttribute("src",
											carrouselssrc.selectedtab[0])
								}
								J.setAttribute("aria-selected", "false");
								J.setAttribute("tabindex", "-1");
								var R = this.parentNode.parentNode
										.getAttribute("data-ariacontrols") == "false" ? "data-controls"
										: "aria-controls";
								var M = document.getElementById(J
										.getAttribute(R));
								M.setAttribute("aria-hidden", "true");
								var I = M
										.querySelectorAll('a, area, button, input, select, textarea, [contenteditable="true"], [tabindex]');
								for (var N = 0; N < I.length; N++) {
									if (I[N].hasAttribute("contenteditable")) {
										I[N].setAttribute(
												"data-contenteditable", "true");
										I[N].removeAttribute("contenteditable")
									}
									if (I[N].hasAttribute("tabindex")) {
										I[N].setAttribute("data-tabindex", I[N]
												.getAttribute("tabindex"))
									} else {
										I[N].setAttribute(
												"data-removetabindex", "true")
									}
									I[N].setAttribute("tabindex", "-1")
								}
								if (!O.parentNode.getAttribute("data-tabs")
										|| O.parentNode
												.getAttribute("data-tabs") == "dots") {
									this.firstChild.setAttribute("src",
											carrouselssrc.selectedtab[1])
								}
								this.setAttribute("aria-selected", "true");
								this.setAttribute("tabindex", "0");
								var Q = document.getElementById(this
										.getAttribute(R));
								Q.setAttribute("aria-hidden", "false");
								I = Q
										.querySelectorAll("[data-tabindex], [data-removetabindex]");
								for (var N = 0; N < I.length; N++) {
									if (I[N]
											.hasAttribute("data-contenteditable")) {
										I[N].setAttribute("contenteditable",
												"true");
										I[N]
												.removeAttribute("data-contenteditable")
									}
									if (I[N].hasAttribute("data-tabindex")) {
										I[N].setAttribute("tabindex", I[N]
												.getAttribute("data-tabindex"));
										I[N].removeAttribute("data-tabindex")
									} else {
										I[N]
												.removeAttribute("data-removetabindex");
										I[N].removeAttribute("tabindex")
									}
								}
							}
						}, false);
		d
				.addEventListener(
						"keydown",
						function(G) {
							if ([ 37, 38 ].indexOf(G.keyCode) > -1) {
								var F = this.previousSibling;
								if (!F) {
									F = this.parentNode.lastChild
								}
								var H = document.createEvent("MouseEvent");
								H.initEvent("click", true, true);
								F.focus();
								F.dispatchEvent(H);
								G.preventDefault()
							} else {
								if ([ 39, 40 ].indexOf(G.keyCode) > -1) {
									var i = this.nextSibling;
									if (!i) {
										i = this.parentNode.firstChild
									}
									var H = document.createEvent("MouseEvent");
									H.initEvent("click", true, true);
									i.focus();
									i.dispatchEvent(H);
									G.preventDefault()
								} else {
									if (G.keyCode == 13) {
										var f = document
												.getElementById(this
														.getAttribute(this
																.hasAttribute("data-controls") ? "data-controls"
																: "aria-controls"));
										f.setAttribute("tabindex", "-1");
										f.focus()
									}
								}
							}
						}, false);
		B.appendChild(d);
		r[w].setAttribute("aria-labelledby", d.getAttribute("id"));
		r[w].setAttribute("role", "tabpanel");
		r[w].addEventListener("keydown", function(F) {
			if (F.ctrlKey && [ 38, 33, 34 ].indexOf(F.keyCode) > -1) {
				var H = document.getElementById(this
						.getAttribute("aria-labelledby"));
				if (F.keyCode == 38) {
					H.focus()
				} else {
					if (F.keyCode == 33) {
						var i = H.previousSibling;
						if (!i) {
							i = H.parentNode.lastChild
						}
						var G = document.createEvent("MouseEvent");
						G.initEvent("click", true, true);
						i.focus();
						i.dispatchEvent(G)
					} else {
						if (F.keyCode == 34) {
							var f = H.nextSibling;
							if (!f) {
								f = H.parentNode.firstChild
							}
							var G = document.createEvent("MouseEvent");
							G.initEvent("click", true, true);
							f.focus();
							f.dispatchEvent(G)
						}
					}
				}
				F.preventDefault()
			}
		}, false);
		r[w].addEventListener("transitionend", carrouselItemChangeEnd, false);
		r[w].addEventListener("oTransitionEnd", carrouselItemChangeEnd, false);
		r[w].addEventListener("webkitTransitionEnd", carrouselItemChangeEnd,
				false)
	}
	var m = [];
	for (var w = 0; w < r.length; w++) {
		if (w == E) {
			A.setAttribute("class", c.getAttribute("id") + "-" + (w + 1))
		}
		A.appendChild(r[w].parentNode.removeChild(r[w]));
		var y = $("option.taglib-language-option:selected").val().split("_")[0]
				.toLowerCase();
		var g = y == "ar" ? 1 : -1;
		m.push("#" + c.getAttribute("id") + " ." + c.getAttribute("id") + "-"
				+ (w + 1) + " > div { left: "
				+ (w > 0 ? g * (w * 100) + "%" : 0) + "; }")
	}
	var x = document.createElement("style");
	x.setAttribute("type", "text/css");
	x.appendChild(document.createTextNode(m.join(" ")));
	document.querySelector("head").appendChild(x);
	if (!(c.getAttribute("data-navbuttons") == "false")) {
		var k = document.createElement("p");
		k.setAttribute("class", "carrousel-previousitem");
		var e = document.createElement("button");
		e.setAttribute("type", "button");
		if (E == 0) {
			e.setAttribute("title", carrouselstxt.previoustab[0]);
			e.setAttribute("disabled", "disabled")
		} else {
			var q = document.getElementById(r[E - 1]
					.getAttribute("aria-labelledby")).firstChild;
			if (q.tagName.toLowerCase() == "img") {
				q = q.getAttribute("alt")
			} else {
				q = q.parentNode.getAttribute("aria-label")
			}
			e.setAttribute("title", q + ", "
					+ carrouselstxt.previoustab[1].toLowerCase())
		}
		if (D) {
			e.addEventListener("keydown", carrouselHelpGlobalButtonKeyDown,
					false);
			e.addEventListener("mousedown",
					carrouselHelpGlobalPreviousButtonMouseDown, false)
		}
		e
				.addEventListener(
						"click",
						function(i) {
							var F = document.createEvent("MouseEvent");
							F.initEvent("click", false, true);
							var f = this.parentNode.parentNode
									.querySelector('ol[role="tablist"] li[role="tab"][aria-selected="true"]');
							f = f.previousSibling ? f.previousSibling
									: f.parentNode.lastChild;
							f.focus();
							f.dispatchEvent(F)
						}, false);
		var o = document.createElement("img");
		o.setAttribute("src", carrouselssrc.previoustab[e.disabled ? 0 : 1]);
		o.setAttribute("alt", e.getAttribute("title"));
		o.setAttribute("id", "previoustab");
		e.removeAttribute("title");
		o.setAttribute("title", o.getAttribute("alt"));
		e.appendChild(o);
		k.appendChild(e);
		c.appendChild(k)
	}
	c.appendChild(A);
	if (!(c.getAttribute("data-navbuttons") == "false")) {
		var u = document.createElement("p");
		u.setAttribute("class", "carrousel-nextitem");
		var n = document.createElement("button");
		n.setAttribute("type", "button");
		if (E == r.length - 1) {
			n.setAttribute("title", carrouselstxt.nexttab[0]);
			n.setAttribute("disabled", "disabled")
		} else {
			var q = document.getElementById(r[E + 1]
					.getAttribute("aria-labelledby")).firstChild;
			if (q.tagName.toLowerCase() == "img") {
				q = q.getAttribute("alt")
			} else {
				q = q.parentNode.getAttribute("aria-label")
			}
			n.setAttribute("title", q + ", "
					+ carrouselstxt.nexttab[1].toLowerCase())
		}
		if (D) {
			n.addEventListener("keydown", carrouselHelpGlobalButtonKeyDown,
					false);
			n.addEventListener("mousedown",
					carrouselHelpGlobalNextButtonMouseDown, false)
		}
		n
				.addEventListener(
						"click",
						function(i) {
							var F = document.createEvent("MouseEvent");
							F.initEvent("click", false, true);
							var f = this.parentNode.parentNode
									.querySelector('ol[role="tablist"] li[role="tab"][aria-selected="true"]');
							f = f.nextSibling ? f.nextSibling
									: f.parentNode.firstChild;
							f.focus();
							f.dispatchEvent(F)
						}, false);
		var b = document.createElement("img");
		b.setAttribute("src", carrouselssrc.nexttab[n.disabled ? 0 : 1]);
		b.setAttribute("alt", n.getAttribute("title"));
		b.setAttribute("id", "nexttab");
		n.removeAttribute("title");
		b.setAttribute("title", b.getAttribute("alt"));
		n.appendChild(b);
		u.appendChild(n);
		c.appendChild(u)
	}
	if (D) {
		c.appendChild(D)
	}
	var C = c.getAttribute("data-play");
	if ([ "auto", "demand" ].indexOf(C) > -1) {
		var l = document.createElement("button");
		l.setAttribute("type", "button");
		l.setAttribute("data-stop", C == "demand" ? "true" : "false");
		l
				.addEventListener(
						"click",
						function(f) {
							if (this.getAttribute("data-stop") == "true") {
								this.setAttribute("data-stop", "false");
								var F = this.parentNode.parentNode
										.getAttribute("id");
								var i = this.parentNode.parentNode
										.hasAttribute("data-duration") ? this.parentNode.parentNode
										.getAttribute("data-duration")
										: carrouselsvar.duration;
								carrousels[F] = window.setInterval(function() {
									carrouselItemChange(F)
								}, i);
								this
										.replaceChild(
												document
														.createTextNode(carrouselstxt.playpause[1]),
												this.firstChild)
							} else {
								this.setAttribute("data-stop", "true");
								window
										.clearInterval(carrousels[this.parentNode.parentNode
												.getAttribute("id")]);
								carrousels[this.parentNode.parentNode
										.getAttribute("id")] = null;
								this
										.replaceChild(
												document
														.createTextNode(carrouselstxt.playpause[0]),
												this.firstChild)
							}
						}, false);
		l
				.appendChild(document
						.createTextNode(carrouselstxt.playpause[C == "demand" ? 0
								: 1]));
		var p = document.createElement("p");
		p.setAttribute("class", "carrousel-playpause");
		p.appendChild(l);
		c.insertBefore(p, c.firstChild);
		c.addEventListener("mouseover", function(f) {
			this.setAttribute("data-stop", "true")
		}, false);
		c.addEventListener("mouseout", function(i) {
			var F = document.activeElement;
			var f = F.parentNode;
			var G = false;
			while (f) {
				if (f == this) {
					G = true;
					break
				}
				f = f.parentNode
			}
			if (!G) {
				this.removeAttribute("data-stop")
			}
		}, false);
		if (C == "auto") {
			var a = c.hasAttribute("data-duration") ? c
					.getAttribute("data-duration") : carrouselsvar.duration;
			var s = c.getAttribute("id");
			carrousels[s] = window.setInterval(function() {
				carrouselItemChange(s)
			}, a)
		}
	}
}
function carrouselItemChange(h) {
	var a = document.getElementById(h);
	var f = document.activeElement.parentNode;
	var b = false;
	if (document.querySelector(":focus")) {
		while (f) {
			if (f == a) {
				b = true;
				break
			}
			f = f.parentNode
		}
	}
	var f = document.querySelector(":hover");
	var d = false;
	while (f) {
		if (f == a) {
			d = true;
			break
		}
		f = f.parentNode
	}
	if (b || d || document.querySelector("#" + a.getAttribute("id") + ":hover")) {
		a.setAttribute("data-stop", "true")
	} else {
		a.removeAttribute("data-stop")
	}
	if (!a.hasAttribute("data-stop")) {
		var i = a.querySelector('[role="tab"][aria-selected="true"]');
		var c = i.nextSibling;
		if ([ "reverse", "imitate" ].indexOf(a.getAttribute("data-playmode")) > -1) {
			if (a.hasAttribute("data-reverse")) {
				c = i.previousSibling;
				if (!c.previousSibling) {
					a.removeAttribute("data-reverse")
				}
			} else {
				if (!c) {
					a.setAttribute("data-reverse", "true");
					c = i.previousSibling
				}
			}
		} else {
			if (!c) {
				c = i.parentNode.firstChild
			}
		}
		var g = document.createEvent("MouseEvent");
		g.initEvent("click", false, true);
		c.dispatchEvent(g)
	}
}
function carrouselItemChangeEnd() {
	if (this.getAttribute("aria-hidden") == "true"
			&& this.querySelector(":focus")) {
		this.parentNode.parentNode.querySelector(
				'[role="tab"][aria-selected="true"]').focus()
	}
}
function carrouselHelpGlobalButtonKeyDown(a) {
	if ([ 13, 32 ].indexOf(a.keyCode) > -1) {
		this.setAttribute("data-help", "false")
	}
}
function carrouselHelpGlobalPreviousButtonMouseDown() {
	var a = this.parentNode.parentNode
			.querySelector('ol[role="tablist"] li[role="tab"][aria-selected="true"]');
	a = a.previousSibling ? a.previousSibling : a.parentNode.lastChild;
	a.setAttribute("data-help", "false")
}
function carrouselHelpGlobalNextButtonMouseDown() {
	var a = this.parentNode.parentNode
			.querySelector('ol[role="tablist"] li[role="tab"][aria-selected="true"]');
	a = a.nextSibling ? a.nextSibling : a.parentNode.firstChild;
	a.setAttribute("data-help", "false")
}
function carrouselHelpTabMouseDown(a) {
	this.setAttribute("data-help", "false")
}
function carrouselHelpTabKeyDown(a) {
	if (a.keyCode == 27) {
		document.getElementById(this.getAttribute("aria-describedby"))
				.setAttribute("hidden", "hidden")
	}
}
function carrouselHelpTabFocus(a) {
	if (this.getAttribute("data-help") != "false") {
		document.getElementById(this.getAttribute("aria-describedby"))
				.removeAttribute("hidden")
	}
	this.removeAttribute("data-help")
}
function carrouselHelpTabBlur(a) {
	document.getElementById(this.getAttribute("aria-describedby"))
			.setAttribute("hidden", "hidden")
}
function deleteCarrouselHelp(d) {
	if (d.keyCode == 46) {
		var e = document.getElementById(d.target
				.getAttribute("aria-describedby"));
		e.parentNode.removeChild(e);
		var c = this.parentNode.parentNode.querySelectorAll("#"
				+ this.parentNode.getAttribute("id")
				+ ' > ol[role="tablist"] > li[role="tab"]');
		for (var b = 0; b < c.length; b++) {
			c[b].removeAttribute("aria-describedby");
			c[b].removeEventListener("mousedown", carrouselHelpTabMouseDown,
					false);
			c[b].removeEventListener("keydown", carrouselHelpTabKeyDown, false);
			c[b].removeEventListener("focus", carrouselHelpTabFocus, false);
			c[b].removeEventListener("blur", carrouselHelpTabBlur, false)
		}
		var a = this.parentNode.parentNode.querySelectorAll("#"
				+ this.parentNode.getAttribute("id")
				+ " > p.carrousel-previousitem button, #"
				+ this.parentNode.getAttribute("id")
				+ " > p.carrousel-nextitem button");
		if (a.length > 0) {
			a[0].removeEventListener("keydown",
					carrouselHelpGlobalButtonKeyDown, false);
			a[0].removeEventListener("mousedown",
					carrouselHelpGlobalPreviousButtonMouseDown, false);
			a[1].removeEventListener("keydown",
					carrouselHelpGlobalButtonKeyDown, false);
			a[1].removeEventListener("mousedown",
					carrouselHelpGlobalNextButtonMouseDown, false)
		}
		this.removeEventListener("keydown", deleteCarrouselHelp, false)
	}
}
function getAvailableId(a) {
	var b = 1;
	while (document.getElementById(a + "-" + b)) {
		b++
	}
	return a + "-" + b
}
window
		.addEventListener(
				"DOMContentLoaded",
				function(b) {
					var c = document
							.querySelectorAll('[data-custompattern="carrousel"] .portlet-body');
					for (var a = 0; a < c.length; a++) {
						createCarrousel(c[a])
					}
					customFranceVisas()
				}, false);
function customFranceVisas() {
	var a = document
			.querySelectorAll('[data-custompattern="carrousel"] .asset-full-content, [data-custompattern="carrousel"] .separator, [data-custompattern="carrousel"] .subscribe-action, [data-custompattern="carrousel"] .add-asset-selector');
	for (var b = 0; b < a.length; b++) {
		a[b].parentNode.removeChild(a[b])
	}
}
/*
 * ! Chosen, a Select Box Enhancer for jQuery and Prototype by Patrick Filler
 * for Harvest, http://getharvest.com
 * 
 * Version 1.6.2 Full source at https://github.com/harvesthq/chosen Copyright
 * (c) 2011-2016 Harvest http://getharvest.com
 * 
 * MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md This
 * file is generated by `grunt build`, do not edit it by hand.
 */
(function() {
	var f, a, g, d, e, b = {}.hasOwnProperty, c = function(k, i) {
		for ( var h in i) {
			if (b.call(i, h)) {
				k[h] = i[h]
			}
		}
		function j() {
			this.constructor = k
		}
		j.prototype = i.prototype;
		k.prototype = new j();
		k.__super__ = i.prototype;
		return k
	};
	d = (function() {
		function h() {
			this.options_index = 0;
			this.parsed = []
		}
		h.prototype.add_node = function(i) {
			if (i.nodeName.toUpperCase() === "OPTGROUP") {
				return this.add_group(i)
			} else {
				return this.add_option(i)
			}
		};
		h.prototype.add_group = function(o) {
			var n, k, m, j, l, i;
			n = this.parsed.length;
			this.parsed.push({
				array_index : n,
				group : true,
				label : this.escapeExpression(o.label),
				title : o.title ? o.title : void 0,
				children : 0,
				disabled : o.disabled,
				classes : o.className
			});
			l = o.childNodes;
			i = [];
			for (m = 0, j = l.length; m < j; m++) {
				k = l[m];
				i.push(this.add_option(k, n, o.disabled))
			}
			return i
		};
		h.prototype.add_option = function(j, k, i) {
			if (j.nodeName.toUpperCase() === "OPTION") {
				if (j.text !== "") {
					if (k != null) {
						this.parsed[k].children += 1
					}
					this.parsed.push({
						array_index : this.parsed.length,
						options_index : this.options_index,
						value : j.value,
						text : j.text,
						html : j.innerHTML,
						title : j.title ? j.title : void 0,
						selected : j.selected,
						disabled : i === true ? i : j.disabled,
						group_array_index : k,
						group_label : k != null ? this.parsed[k].label : null,
						classes : j.className,
						style : j.style.cssText
					})
				} else {
					this.parsed.push({
						array_index : this.parsed.length,
						options_index : this.options_index,
						empty : true
					})
				}
				return this.options_index += 1
			}
		};
		h.prototype.escapeExpression = function(k) {
			var j, i;
			if ((k == null) || k === false) {
				return ""
			}
			if (!/[\&\<\>\"\'\`]/.test(k)) {
				return k
			}
			j = {
				"<" : "&lt;",
				">" : "&gt;",
				'"' : "&quot;",
				"'" : "&#x27;",
				"`" : "&#x60;"
			};
			i = /&(?!\w+;)|[\<\>\"\'\`]/g;
			return k.replace(i, function(l) {
				return j[l] || "&amp;"
			})
		};
		return h
	})();
	d.select_to_array = function(h) {
		var m, l, k, i, j;
		l = new d();
		j = h.childNodes;
		for (k = 0, i = j.length; k < i; k++) {
			m = j[k];
			l.add_node(m)
		}
		return l.parsed
	};
	a = (function() {
		function h(i, j) {
			this.form_field = i;
			this.options = j != null ? j : {};
			if (!h.browser_is_supported()) {
				return
			}
			this.is_multiple = this.form_field.multiple;
			this.set_default_text();
			this.set_default_values();
			this.setup();
			this.set_up_html();
			this.register_observers();
			this.on_ready()
		}
		h.prototype.set_default_values = function() {
			var i = this;
			this.click_test_action = function(j) {
				return i.test_active_click(j)
			};
			this.activate_action = function(j) {
				return i.activate_field(j)
			};
			this.active_field = false;
			this.mouse_on_container = false;
			this.results_showing = false;
			this.result_highlighted = null;
			this.allow_single_deselect = (this.options.allow_single_deselect != null)
					&& (this.form_field.options[0] != null)
					&& this.form_field.options[0].text === "" ? this.options.allow_single_deselect
					: false;
			this.disable_search_threshold = this.options.disable_search_threshold || 0;
			this.disable_search = this.options.disable_search || false;
			this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search
					: true;
			this.group_search = this.options.group_search != null ? this.options.group_search
					: true;
			this.search_contains = this.options.search_contains || false;
			this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete
					: true;
			this.max_selected_options = this.options.max_selected_options
					|| Infinity;
			this.inherit_select_classes = this.options.inherit_select_classes || false;
			this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options
					: true;
			this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options
					: true;
			this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;
			this.max_shown_results = this.options.max_shown_results
					|| Number.POSITIVE_INFINITY;
			return this.case_sensitive_search = this.options.case_sensitive_search || false
		};
		h.prototype.set_default_text = function() {
			if (this.form_field.getAttribute("data-placeholder")) {
				this.default_text = this.form_field
						.getAttribute("data-placeholder")
			} else {
				if (this.is_multiple) {
					this.default_text = this.options.placeholder_text_multiple
							|| this.options.placeholder_text
							|| h.default_multiple_text
				} else {
					this.default_text = this.options.placeholder_text_single
							|| this.options.placeholder_text
							|| h.default_single_text
				}
			}
			return this.results_none_found = this.form_field
					.getAttribute("data-no_results_text")
					|| this.options.no_results_text || h.default_no_result_text
		};
		h.prototype.choice_label = function(i) {
			if (this.include_group_label_in_selected && (i.group_label != null)) {
				return "<b class='group-name'>" + i.group_label + "</b>"
						+ i.html
			} else {
				return i.html
			}
		};
		h.prototype.mouse_enter = function() {
			return this.mouse_on_container = true
		};
		h.prototype.mouse_leave = function() {
			return this.mouse_on_container = false
		};
		h.prototype.input_focus = function(i) {
			var j = this;
			if (this.is_multiple) {
				if (!this.active_field) {
					return setTimeout((function() {
						return j.container_mousedown()
					}), 50)
				}
			} else {
				if (!this.active_field) {
					return this.activate_field()
				}
			}
		};
		h.prototype.input_blur = function(i) {
			var j = this;
			if (!this.mouse_on_container) {
				this.active_field = false;
				return setTimeout((function() {
					return j.blur_test()
				}), 100)
			}
		};
		h.prototype.results_option_build = function(j) {
			var k, n, o, p, m, i, l;
			k = "";
			p = 0;
			l = this.results_data;
			for (m = 0, i = l.length; m < i; m++) {
				n = l[m];
				o = "";
				if (n.group) {
					o = this.result_add_group(n)
				} else {
					o = this.result_add_option(n)
				}
				if (o !== "") {
					p++;
					k += o
				}
				if (j != null ? j.first : void 0) {
					if (n.selected && this.is_multiple) {
						this.choice_build(n)
					} else {
						if (n.selected && !this.is_multiple) {
							this.single_set_selected_text(this.choice_label(n))
						}
					}
				}
				if (p >= this.max_shown_results) {
					break
				}
			}
			return k
		};
		h.prototype.result_add_option = function(k) {
			var j, i;
			if (!k.search_match) {
				return ""
			}
			if (!this.include_option_in_results(k)) {
				return ""
			}
			j = [];
			if (!k.disabled && !(k.selected && this.is_multiple)) {
				j.push("active-result")
			}
			if (k.disabled && !(k.selected && this.is_multiple)) {
				j.push("disabled-result")
			}
			if (k.selected) {
				j.push("result-selected")
			}
			if (k.group_array_index != null) {
				j.push("group-option")
			}
			if (k.classes !== "") {
				j.push(k.classes)
			}
			i = document.createElement("li");
			i.className = j.join(" ");
			i.style.cssText = k.style;
			i.setAttribute("data-option-array-index", k.array_index);
			i.innerHTML = k.search_text;
			if (k.title) {
				i.title = k.title
			}
			return this.outerHTML(i)
		};
		h.prototype.result_add_group = function(k) {
			var j, i;
			if (!(k.search_match || k.group_match)) {
				return ""
			}
			if (!(k.active_options > 0)) {
				return ""
			}
			j = [];
			j.push("group-result");
			if (k.classes) {
				j.push(k.classes)
			}
			i = document.createElement("li");
			i.className = j.join(" ");
			i.innerHTML = k.search_text;
			if (k.title) {
				i.title = k.title
			}
			return this.outerHTML(i)
		};
		h.prototype.results_update_field = function() {
			this.set_default_text();
			if (!this.is_multiple) {
				this.results_reset_cleanup()
			}
			this.result_clear_highlight();
			this.results_build();
			if (this.results_showing) {
				return this.winnow_results()
			}
		};
		h.prototype.reset_single_select_options = function() {
			var i, m, k, l, j;
			l = this.results_data;
			j = [];
			for (m = 0, k = l.length; m < k; m++) {
				i = l[m];
				if (i.selected) {
					j.push(i.selected = false)
				} else {
					j.push(void 0)
				}
			}
			return j
		};
		h.prototype.results_toggle = function() {
			if (this.results_showing) {
				return this.results_hide()
			} else {
				return this.results_show()
			}
		};
		h.prototype.results_search = function(i) {
			if (this.results_showing) {
				return this.winnow_results()
			} else {
				return this.results_show()
			}
		};
		h.prototype.winnow_results = function() {
			var t, n, q, m, i, s, o, r, j, k, p, l;
			this.no_results_clear();
			m = 0;
			s = this.get_search_text();
			t = s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
			j = new RegExp(t, "i");
			q = this.get_search_regex(t);
			l = this.results_data;
			for (k = 0, p = l.length; k < p; k++) {
				n = l[k];
				n.search_match = false;
				i = null;
				if (this.include_option_in_results(n)) {
					if (n.group) {
						n.group_match = false;
						n.active_options = 0
					}
					if ((n.group_array_index != null)
							&& this.results_data[n.group_array_index]) {
						i = this.results_data[n.group_array_index];
						if (i.active_options === 0 && i.search_match) {
							m += 1
						}
						i.active_options += 1
					}
					n.search_text = n.group ? n.label : n.html;
					if (!(n.group && !this.group_search)) {
						n.search_match = this.search_string_match(
								n.search_text, q);
						if (n.search_match && !n.group) {
							m += 1
						}
						if (n.search_match) {
							if (s.length) {
								o = n.search_text.search(j);
								r = n.search_text.substr(0, o + s.length)
										+ "</em>"
										+ n.search_text.substr(o + s.length);
								n.search_text = r.substr(0, o) + "<em>"
										+ r.substr(o)
							}
							if (i != null) {
								i.group_match = true
							}
						} else {
							if ((n.group_array_index != null)
									&& this.results_data[n.group_array_index].search_match) {
								n.search_match = true
							}
						}
					}
				}
			}
			this.result_clear_highlight();
			if (m < 1 && s.length) {
				this.update_results_content("");
				return this.no_results(s)
			} else {
				this.update_results_content(this.results_option_build());
				return this.winnow_results_set_highlight()
			}
		};
		h.prototype.get_search_regex = function(j) {
			var i, k;
			i = this.search_contains ? "" : "^";
			k = this.case_sensitive_search ? "" : "i";
			return new RegExp(i + j, k)
		};
		h.prototype.search_string_match = function(n, k) {
			var j, m, l, i;
			if (k.test(n)) {
				return true
			} else {
				if (this.enable_split_word_search
						&& (n.indexOf(" ") >= 0 || n.indexOf("[") === 0)) {
					m = n.replace(/\[|\]/g, "").split(" ");
					if (m.length) {
						for (l = 0, i = m.length; l < i; l++) {
							j = m[l];
							if (k.test(j)) {
								return true
							}
						}
					}
				}
			}
		};
		h.prototype.choices_count = function() {
			var j, l, i, k;
			if (this.selected_option_count != null) {
				return this.selected_option_count
			}
			this.selected_option_count = 0;
			k = this.form_field.options;
			for (l = 0, i = k.length; l < i; l++) {
				j = k[l];
				if (j.selected) {
					this.selected_option_count += 1
				}
			}
			return this.selected_option_count
		};
		h.prototype.choices_click = function(i) {
			i.preventDefault();
			if (!(this.results_showing || this.is_disabled)) {
				return this.results_show()
			}
		};
		h.prototype.keyup_checker = function(i) {
			var k, j;
			k = (j = i.which) != null ? j : i.keyCode;
			this.search_field_scale();
			switch (k) {
			case 8:
				if (this.is_multiple && this.backstroke_length < 1
						&& this.choices_count() > 0) {
					return this.keydown_backstroke()
				} else {
					if (!this.pending_backstroke) {
						this.result_clear_highlight();
						return this.results_search()
					}
				}
				break;
			case 13:
				i.preventDefault();
				if (this.results_showing) {
					return this.result_select(i)
				}
				break;
			case 27:
				if (this.results_showing) {
					this.results_hide()
				}
				return true;
			case 9:
			case 38:
			case 40:
			case 16:
			case 91:
			case 17:
			case 18:
				break;
			default:
				return this.results_search()
			}
		};
		h.prototype.clipboard_event_checker = function(i) {
			var j = this;
			return setTimeout((function() {
				return j.results_search()
			}), 50)
		};
		h.prototype.container_width = function() {
			if (this.options.width != null) {
				return this.options.width
			} else {
				return "" + this.form_field.offsetWidth + "px"
			}
		};
		h.prototype.include_option_in_results = function(i) {
			if (this.is_multiple
					&& (!this.display_selected_options && i.selected)) {
				return false
			}
			if (!this.display_disabled_options && i.disabled) {
				return false
			}
			if (i.empty) {
				return false
			}
			return true
		};
		h.prototype.search_results_touchstart = function(i) {
			this.touch_started = true;
			return this.search_results_mouseover(i)
		};
		h.prototype.search_results_touchmove = function(i) {
			this.touch_started = false;
			return this.search_results_mouseout(i)
		};
		h.prototype.search_results_touchend = function(i) {
			if (this.touch_started) {
				return this.search_results_mouseup(i)
			}
		};
		h.prototype.outerHTML = function(j) {
			var i;
			if (j.outerHTML) {
				return j.outerHTML
			}
			i = document.createElement("div");
			i.appendChild(j);
			return i.innerHTML
		};
		h.browser_is_supported = function() {
			if ("Microsoft Internet Explorer" === window.navigator.appName) {
				return document.documentMode >= 8
			}
			if (/iP(od|hone)/i.test(window.navigator.userAgent)
					|| /IEMobile/i.test(window.navigator.userAgent)
					|| /Windows Phone/i.test(window.navigator.userAgent)
					|| /BlackBerry/i.test(window.navigator.userAgent)
					|| /BB10/i.test(window.navigator.userAgent)
					|| /Android.*Mobile/i.test(window.navigator.userAgent)) {
				return false
			}
			return true
		};
		h.default_multiple_text = "Select Some Options";
		h.default_single_text = "Select an Option";
		h.default_no_result_text = "No results match";
		return h
	})();
	f = jQuery;
	f.fn.extend({
		chosen : function(h) {
			if (!a.browser_is_supported()) {
				return this
			}
			return this.each(function(j) {
				var k, i;
				k = f(this);
				i = k.data("chosen");
				if (h === "destroy") {
					if (i instanceof g) {
						i.destroy()
					}
					return
				}
				if (!(i instanceof g)) {
					k.data("chosen", new g(this, h))
				}
			})
		}
	});
	g = (function(h) {
		c(i, h);
		function i() {
			e = i.__super__.constructor.apply(this, arguments);
			return e
		}
		i.prototype.setup = function() {
			this.form_field_jq = f(this.form_field);
			this.current_selectedIndex = this.form_field.selectedIndex;
			return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl")
		};
		i.prototype.set_up_html = function() {
			var j, k;
			j = [ "chosen-container" ];
			j.push("chosen-container-"
					+ (this.is_multiple ? "multi" : "single"));
			if (this.inherit_select_classes && this.form_field.className) {
				j.push(this.form_field.className)
			}
			if (this.is_rtl) {
				j.push("chosen-rtl")
			}
			k = {
				"class" : j.join(" "),
				style : "width: " + (this.container_width()) + ";",
				title : this.form_field.title
			};
			if (this.form_field.id.length) {
				k.id = this.form_field.id.replace(/[^\w]/g, "_") + "_chosen"
			}
			this.container = f("<div />", k);
			if (this.is_multiple) {
				this.container
						.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="'
								+ this.default_text
								+ '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>')
			} else {
				this.container
						.html('<a class="chosen-single chosen-default"><span>'
								+ this.default_text
								+ '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>')
			}
			this.form_field_jq.hide().after(this.container);
			this.dropdown = this.container.find("div.chosen-drop").first();
			this.search_field = this.container.find("input").first();
			this.search_results = this.container.find("ul.chosen-results")
					.first();
			this.search_field_scale();
			this.search_no_results = this.container.find("li.no-results")
					.first();
			if (this.is_multiple) {
				this.search_choices = this.container.find("ul.chosen-choices")
						.first();
				this.search_container = this.container.find("li.search-field")
						.first()
			} else {
				this.search_container = this.container
						.find("div.chosen-search").first();
				this.selected_item = this.container.find(".chosen-single")
						.first()
			}
			this.results_build();
			this.set_tab_index();
			return this.set_label_behavior()
		};
		i.prototype.on_ready = function() {
			return this.form_field_jq.trigger("chosen:ready", {
				chosen : this
			})
		};
		i.prototype.register_observers = function() {
			var j = this;
			this.container.bind("touchstart.chosen", function(k) {
				j.container_mousedown(k);
				return k.preventDefault()
			});
			this.container.bind("touchend.chosen", function(k) {
				j.container_mouseup(k);
				return k.preventDefault()
			});
			this.container.bind("mousedown.chosen", function(k) {
				j.container_mousedown(k)
			});
			this.container.bind("mouseup.chosen", function(k) {
				j.container_mouseup(k)
			});
			this.container.bind("mouseenter.chosen", function(k) {
				j.mouse_enter(k)
			});
			this.container.bind("mouseleave.chosen", function(k) {
				j.mouse_leave(k)
			});
			this.search_results.bind("mouseup.chosen", function(k) {
				j.search_results_mouseup(k)
			});
			this.search_results.bind("mouseover.chosen", function(k) {
				j.search_results_mouseover(k)
			});
			this.search_results.bind("mouseout.chosen", function(k) {
				j.search_results_mouseout(k)
			});
			this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen",
					function(k) {
						j.search_results_mousewheel(k)
					});
			this.search_results.bind("touchstart.chosen", function(k) {
				j.search_results_touchstart(k)
			});
			this.search_results.bind("touchmove.chosen", function(k) {
				j.search_results_touchmove(k)
			});
			this.search_results.bind("touchend.chosen", function(k) {
				j.search_results_touchend(k)
			});
			this.form_field_jq.bind("chosen:updated.chosen", function(k) {
				j.results_update_field(k)
			});
			this.form_field_jq.bind("chosen:activate.chosen", function(k) {
				j.activate_field(k)
			});
			this.form_field_jq.bind("chosen:open.chosen", function(k) {
				j.container_mousedown(k)
			});
			this.form_field_jq.bind("chosen:close.chosen", function(k) {
				j.input_blur(k)
			});
			this.search_field.bind("blur.chosen", function(k) {
				j.input_blur(k)
			});
			this.search_field.bind("keyup.chosen", function(k) {
				j.keyup_checker(k)
			});
			this.search_field.bind("keydown.chosen", function(k) {
				j.keydown_checker(k)
			});
			this.search_field.bind("focus.chosen", function(k) {
				j.input_focus(k)
			});
			this.search_field.bind("cut.chosen", function(k) {
				j.clipboard_event_checker(k)
			});
			this.search_field.bind("paste.chosen", function(k) {
				j.clipboard_event_checker(k)
			});
			if (this.is_multiple) {
				return this.search_choices.bind("click.chosen", function(k) {
					j.choices_click(k)
				})
			} else {
				return this.container.bind("click.chosen", function(k) {
					k.preventDefault()
				})
			}
		};
		i.prototype.destroy = function() {
			f(this.container[0].ownerDocument).unbind("click.chosen",
					this.click_test_action);
			if (this.search_field[0].tabIndex) {
				this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex
			}
			this.container.remove();
			this.form_field_jq.removeData("chosen");
			return this.form_field_jq.show()
		};
		i.prototype.search_field_disabled = function() {
			this.is_disabled = this.form_field_jq[0].disabled;
			if (this.is_disabled) {
				this.container.addClass("chosen-disabled");
				this.search_field[0].disabled = true;
				if (!this.is_multiple) {
					this.selected_item.unbind("focus.chosen",
							this.activate_action)
				}
				return this.close_field()
			} else {
				this.container.removeClass("chosen-disabled");
				this.search_field[0].disabled = false;
				if (!this.is_multiple) {
					return this.selected_item.bind("focus.chosen",
							this.activate_action)
				}
			}
		};
		i.prototype.container_mousedown = function(j) {
			if (!this.is_disabled) {
				if (j && j.type === "mousedown" && !this.results_showing) {
					j.preventDefault()
				}
				if (!((j != null) && (f(j.target))
						.hasClass("search-choice-close"))) {
					if (!this.active_field) {
						if (this.is_multiple) {
							this.search_field.val("")
						}
						f(this.container[0].ownerDocument).bind("click.chosen",
								this.click_test_action);
						this.results_show()
					} else {
						if (!this.is_multiple
								&& j
								&& ((f(j.target)[0] === this.selected_item[0]) || f(
										j.target).parents("a.chosen-single").length)) {
							j.preventDefault();
							this.results_toggle()
						}
					}
					return this.activate_field()
				}
			}
		};
		i.prototype.container_mouseup = function(j) {
			if (j.target.nodeName === "ABBR" && !this.is_disabled) {
				return this.results_reset(j)
			}
		};
		i.prototype.search_results_mousewheel = function(j) {
			var k;
			if (j.originalEvent) {
				k = j.originalEvent.deltaY || -j.originalEvent.wheelDelta
						|| j.originalEvent.detail
			}
			if (k != null) {
				j.preventDefault();
				if (j.type === "DOMMouseScroll") {
					k = k * 40
				}
				return this.search_results.scrollTop(k
						+ this.search_results.scrollTop())
			}
		};
		i.prototype.blur_test = function(j) {
			if (!this.active_field
					&& this.container.hasClass("chosen-container-active")) {
				return this.close_field()
			}
		};
		i.prototype.close_field = function() {
			f(this.container[0].ownerDocument).unbind("click.chosen",
					this.click_test_action);
			this.active_field = false;
			this.results_hide();
			this.container.removeClass("chosen-container-active");
			this.clear_backstroke();
			this.show_search_field_default();
			return this.search_field_scale()
		};
		i.prototype.activate_field = function() {
			this.container.addClass("chosen-container-active");
			this.active_field = true;
			this.search_field.val(this.search_field.val());
			return this.search_field.focus()
		};
		i.prototype.test_active_click = function(j) {
			var k;
			k = f(j.target).closest(".chosen-container");
			if (k.length && this.container[0] === k[0]) {
				return this.active_field = true
			} else {
				return this.close_field()
			}
		};
		i.prototype.results_build = function() {
			this.parsing = true;
			this.selected_option_count = null;
			this.results_data = d.select_to_array(this.form_field);
			if (this.is_multiple) {
				this.search_choices.find("li.search-choice").remove()
			} else {
				if (!this.is_multiple) {
					this.single_set_selected_text();
					if (this.disable_search
							|| this.form_field.options.length <= this.disable_search_threshold) {
						this.search_field[0].readOnly = true;
						this.container
								.addClass("chosen-container-single-nosearch")
					} else {
						this.search_field[0].readOnly = false;
						this.container
								.removeClass("chosen-container-single-nosearch")
					}
				}
			}
			this.update_results_content(this.results_option_build({
				first : true
			}));
			this.search_field_disabled();
			this.show_search_field_default();
			this.search_field_scale();
			return this.parsing = false
		};
		i.prototype.result_do_highlight = function(k) {
			var o, n, l, m, j;
			if (k.length) {
				this.result_clear_highlight();
				this.result_highlight = k;
				this.result_highlight.addClass("highlighted");
				l = parseInt(this.search_results.css("maxHeight"), 10);
				j = this.search_results.scrollTop();
				m = l + j;
				n = this.result_highlight.position().top
						+ this.search_results.scrollTop();
				o = n + this.result_highlight.outerHeight();
				if (o >= m) {
					return this.search_results.scrollTop((o - l) > 0 ? o - l
							: 0)
				} else {
					if (n < j) {
						return this.search_results.scrollTop(n)
					}
				}
			}
		};
		i.prototype.result_clear_highlight = function() {
			if (this.result_highlight) {
				this.result_highlight.removeClass("highlighted")
			}
			return this.result_highlight = null
		};
		i.prototype.results_show = function() {
			if (this.is_multiple
					&& this.max_selected_options <= this.choices_count()) {
				this.form_field_jq.trigger("chosen:maxselected", {
					chosen : this
				});
				return false
			}
			this.container.addClass("chosen-with-drop");
			this.results_showing = true;
			this.search_field.focus();
			this.search_field.val(this.search_field.val());
			this.winnow_results();
			return this.form_field_jq.trigger("chosen:showing_dropdown", {
				chosen : this
			})
		};
		i.prototype.update_results_content = function(j) {
			return this.search_results.html(j)
		};
		i.prototype.results_hide = function() {
			if (this.results_showing) {
				this.result_clear_highlight();
				this.container.removeClass("chosen-with-drop");
				this.form_field_jq.trigger("chosen:hiding_dropdown", {
					chosen : this
				})
			}
			return this.results_showing = false
		};
		i.prototype.set_tab_index = function(k) {
			var j;
			if (this.form_field.tabIndex) {
				j = this.form_field.tabIndex;
				this.form_field.tabIndex = -1;
				return this.search_field[0].tabIndex = j
			}
		};
		i.prototype.set_label_behavior = function() {
			var j = this;
			this.form_field_label = this.form_field_jq.parents("label");
			if (!this.form_field_label.length && this.form_field.id.length) {
				this.form_field_label = f("label[for='" + this.form_field.id
						+ "']")
			}
			if (this.form_field_label.length > 0) {
				return this.form_field_label.bind("click.chosen", function(k) {
					if (j.is_multiple) {
						return j.container_mousedown(k)
					} else {
						return j.activate_field()
					}
				})
			}
		};
		i.prototype.show_search_field_default = function() {
			if (this.is_multiple && this.choices_count() < 1
					&& !this.active_field) {
				this.search_field.val(this.default_text);
				return this.search_field.addClass("default")
			} else {
				this.search_field.val("");
				return this.search_field.removeClass("default")
			}
		};
		i.prototype.search_results_mouseup = function(j) {
			var k;
			k = f(j.target).hasClass("active-result") ? f(j.target) : f(
					j.target).parents(".active-result").first();
			if (k.length) {
				this.result_highlight = k;
				this.result_select(j);
				return this.search_field.focus()
			}
		};
		i.prototype.search_results_mouseover = function(j) {
			var k;
			k = f(j.target).hasClass("active-result") ? f(j.target) : f(
					j.target).parents(".active-result").first();
			if (k) {
				return this.result_do_highlight(k)
			}
		};
		i.prototype.search_results_mouseout = function(j) {
			if (f(j.target).hasClass(
					"active-result"
							|| f(j.target).parents(".active-result").first())) {
				return this.result_clear_highlight()
			}
		};
		i.prototype.choice_build = function(k) {
			var j, l, m = this;
			j = f("<li />", {
				"class" : "search-choice"
			}).html("<span>" + (this.choice_label(k)) + "</span>");
			if (k.disabled) {
				j.addClass("search-choice-disabled")
			} else {
				l = f("<a />", {
					"class" : "search-choice-close",
					"data-option-array-index" : k.array_index
				});
				l.bind("click.chosen", function(n) {
					return m.choice_destroy_link_click(n)
				});
				j.append(l)
			}
			return this.search_container.before(j)
		};
		i.prototype.choice_destroy_link_click = function(j) {
			j.preventDefault();
			j.stopPropagation();
			if (!this.is_disabled) {
				return this.choice_destroy(f(j.target))
			}
		};
		i.prototype.choice_destroy = function(j) {
			if (this.result_deselect(j[0]
					.getAttribute("data-option-array-index"))) {
				this.show_search_field_default();
				if (this.is_multiple && this.choices_count() > 0
						&& this.search_field.val().length < 1) {
					this.results_hide()
				}
				j.parents("li").first().remove();
				return this.search_field_scale()
			}
		};
		i.prototype.results_reset = function() {
			this.reset_single_select_options();
			this.form_field.options[0].selected = true;
			this.single_set_selected_text();
			this.show_search_field_default();
			this.results_reset_cleanup();
			this.form_field_jq.trigger("change");
			if (this.active_field) {
				return this.results_hide()
			}
		};
		i.prototype.results_reset_cleanup = function() {
			this.current_selectedIndex = this.form_field.selectedIndex;
			return this.selected_item.find("abbr").remove()
		};
		i.prototype.result_select = function(j) {
			var l, k;
			if (this.result_highlight) {
				l = this.result_highlight;
				this.result_clear_highlight();
				if (this.is_multiple
						&& this.max_selected_options <= this.choices_count()) {
					this.form_field_jq.trigger("chosen:maxselected", {
						chosen : this
					});
					return false
				}
				if (this.is_multiple) {
					l.removeClass("active-result")
				} else {
					this.reset_single_select_options()
				}
				l.addClass("result-selected");
				k = this.results_data[l[0]
						.getAttribute("data-option-array-index")];
				k.selected = true;
				this.form_field.options[k.options_index].selected = true;
				this.selected_option_count = null;
				if (this.is_multiple) {
					this.choice_build(k)
				} else {
					this.single_set_selected_text(this.choice_label(k))
				}
				if (!((j.metaKey || j.ctrlKey) && this.is_multiple)) {
					this.results_hide()
				}
				this.show_search_field_default();
				if (this.is_multiple
						|| this.form_field.selectedIndex !== this.current_selectedIndex) {
					this.form_field_jq
							.trigger(
									"change",
									{
										selected : this.form_field.options[k.options_index].value
									})
				}
				this.current_selectedIndex = this.form_field.selectedIndex;
				j.preventDefault();
				return this.search_field_scale()
			}
		};
		i.prototype.single_set_selected_text = function(j) {
			if (j == null) {
				j = this.default_text
			}
			if (j === this.default_text) {
				this.selected_item.addClass("chosen-default")
			} else {
				this.single_deselect_control_build();
				this.selected_item.removeClass("chosen-default")
			}
			return this.selected_item.find("span").html(j)
		};
		i.prototype.result_deselect = function(k) {
			var j;
			j = this.results_data[k];
			if (!this.form_field.options[j.options_index].disabled) {
				j.selected = false;
				this.form_field.options[j.options_index].selected = false;
				this.selected_option_count = null;
				this.result_clear_highlight();
				if (this.results_showing) {
					this.winnow_results()
				}
				this.form_field_jq.trigger("change", {
					deselected : this.form_field.options[j.options_index].value
				});
				this.search_field_scale();
				return true
			} else {
				return false
			}
		};
		i.prototype.single_deselect_control_build = function() {
			if (!this.allow_single_deselect) {
				return
			}
			if (!this.selected_item.find("abbr").length) {
				this.selected_item.find("span").first().after(
						'<abbr class="search-choice-close"></abbr>')
			}
			return this.selected_item.addClass("chosen-single-with-deselect")
		};
		i.prototype.get_search_text = function() {
			return f("<div/>").text(f.trim(this.search_field.val())).html()
		};
		i.prototype.winnow_results_set_highlight = function() {
			var j, k;
			k = !this.is_multiple ? this.search_results
					.find(".result-selected.active-result") : [];
			j = k.length ? k.first() : this.search_results.find(
					".active-result").first();
			if (j != null) {
				return this.result_do_highlight(j)
			}
		};
		i.prototype.no_results = function(j) {
			var k;
			k = f('<li class="no-results">' + this.results_none_found
					+ ' "<span></span>"</li>');
			k.find("span").first().html(j);
			this.search_results.append(k);
			return this.form_field_jq.trigger("chosen:no_results", {
				chosen : this
			})
		};
		i.prototype.no_results_clear = function() {
			return this.search_results.find(".no-results").remove()
		};
		i.prototype.keydown_arrow = function() {
			var j;
			if (this.results_showing && this.result_highlight) {
				j = this.result_highlight.nextAll("li.active-result").first();
				if (j) {
					return this.result_do_highlight(j)
				}
			} else {
				return this.results_show()
			}
		};
		i.prototype.keyup_arrow = function() {
			var j;
			if (!this.results_showing && !this.is_multiple) {
				return this.results_show()
			} else {
				if (this.result_highlight) {
					j = this.result_highlight.prevAll("li.active-result");
					if (j.length) {
						return this.result_do_highlight(j.first())
					} else {
						if (this.choices_count() > 0) {
							this.results_hide()
						}
						return this.result_clear_highlight()
					}
				}
			}
		};
		i.prototype.keydown_backstroke = function() {
			var j;
			if (this.pending_backstroke) {
				this.choice_destroy(this.pending_backstroke.find("a").first());
				return this.clear_backstroke()
			} else {
				j = this.search_container.siblings("li.search-choice").last();
				if (j.length && !j.hasClass("search-choice-disabled")) {
					this.pending_backstroke = j;
					if (this.single_backstroke_delete) {
						return this.keydown_backstroke()
					} else {
						return this.pending_backstroke
								.addClass("search-choice-focus")
					}
				}
			}
		};
		i.prototype.clear_backstroke = function() {
			if (this.pending_backstroke) {
				this.pending_backstroke.removeClass("search-choice-focus")
			}
			return this.pending_backstroke = null
		};
		i.prototype.keydown_checker = function(k) {
			var l, j;
			l = (j = k.which) != null ? j : k.keyCode;
			this.search_field_scale();
			if (l !== 8 && this.pending_backstroke) {
				this.clear_backstroke()
			}
			switch (l) {
			case 8:
				this.backstroke_length = this.search_field.val().length;
				break;
			case 9:
				if (this.results_showing && !this.is_multiple) {
					this.result_select(k)
				}
				this.mouse_on_container = false;
				break;
			case 13:
				if (this.results_showing) {
					k.preventDefault()
				}
				break;
			case 32:
				if (this.disable_search) {
					k.preventDefault()
				}
				break;
			case 38:
				k.preventDefault();
				this.keyup_arrow();
				break;
			case 40:
				k.preventDefault();
				this.keydown_arrow();
				break
			}
		};
		i.prototype.search_field_scale = function() {
			var j, n, m, k, q, r, p, l, o;
			if (this.is_multiple) {
				m = 0;
				p = 0;
				q = "position:absolute; left: -1000px; top: -1000px; display:none;";
				r = [ "font-size", "font-style", "font-weight", "font-family",
						"line-height", "text-transform", "letter-spacing" ];
				for (l = 0, o = r.length; l < o; l++) {
					k = r[l];
					q += k + ":" + this.search_field.css(k) + ";"
				}
				j = f("<div />", {
					style : q
				});
				j.text(this.search_field.val());
				f("body").append(j);
				p = j.width() + 25;
				j.remove();
				n = this.container.outerWidth();
				if (p > n - 10) {
					p = n - 10
				}
				return this.search_field.css({
					width : p + "px"
				})
			}
		};
		return i
	})(a)
}).call(this);
function displayLoading(a, b) {
	document.getElementById(a).disabled = true;
	document.getElementById(b).style.display = "block"
}
$(document).ready(
		function() {
			$(".btn-menu-custom").click(
					function() {
						if ($(this).hasClass("unopen")) {
							$(".menu-custom-off").addClass("menu-custom-on")
									.removeClass("menu-custom-off");
							$(".menu-custom-off").removeAttr("style");
							$(this).removeClass("unopen")
						} else {
							$(".menu-custom-on").addClass("menu-custom-off")
									.removeClass("menu-custom-on");
							$(".menu-custom-on").removeAttr("style");
							$(this).addClass("unopen")
						}
					})
		});
(function(e, g, h) {
	var f = "accessibleMegaMenu", d = {
		uuidPrefix : "accessible-megamenu",
		menuClass : "accessible-megamenu",
		topNavItemClass : "accessible-megamenu-top-nav-item",
		panelClass : "accessible-megamenu-panel",
		panelGroupClass : "accessible-megamenu-panel-group",
		hoverClass : "hover",
		focusClass : "focus",
		openClass : "open"
	}, a = {
		BACKSPACE : 8,
		COMMA : 188,
		DELETE : 46,
		DOWN : 40,
		END : 35,
		ENTER : 13,
		ESCAPE : 27,
		HOME : 36,
		LEFT : 37,
		PAGE_DOWN : 34,
		PAGE_UP : 33,
		PERIOD : 190,
		RIGHT : 39,
		SPACE : 32,
		TAB : 9,
		UP : 38,
		keyMap : {
			48 : "0",
			49 : "1",
			50 : "2",
			51 : "3",
			52 : "4",
			53 : "5",
			54 : "6",
			55 : "7",
			56 : "8",
			57 : "9",
			59 : ";",
			65 : "a",
			66 : "b",
			67 : "c",
			68 : "d",
			69 : "e",
			70 : "f",
			71 : "g",
			72 : "h",
			73 : "i",
			74 : "j",
			75 : "k",
			76 : "l",
			77 : "m",
			78 : "n",
			79 : "o",
			80 : "p",
			81 : "q",
			82 : "r",
			83 : "s",
			84 : "t",
			85 : "u",
			86 : "v",
			87 : "w",
			88 : "x",
			89 : "y",
			90 : "z",
			96 : "0",
			97 : "1",
			98 : "2",
			99 : "3",
			100 : "4",
			101 : "5",
			102 : "6",
			103 : "7",
			104 : "8",
			105 : "9",
			190 : "."
		}
	};
	function b(k, j) {
		this.element = k;
		this.settings = e.extend({}, d, j);
		this._defaults = d;
		this._name = f;
		this.mouseTimeoutID = null;
		this.focusTimeoutID = null;
		this.mouseFocused = false;
		this.justFocused = false;
		this.init()
	}
	b.prototype = (function() {
		var j = 0, s = 1000, p = "", q = typeof g.hasOwnProperty === "function"
				&& !!g.hasOwnProperty("ontouchstart"), k, t, w, u, y, v, m, z, l, n, x, o, r;
		k = function(A) {
			return e(A).closest(":data(plugin_" + f + ")").data("plugin_" + f)
		};
		t = function(A) {
			A = e(A);
			var B = this.settings;
			if (!A.attr("id")) {
				A.attr("id", B.uuidPrefix + "-" + new Date().getTime() + "-"
						+ (++j))
			}
		};
		w = function(B, G) {
			var I = e(B.target), H = this, E = this.settings, C = this.menu, D = I
					.closest("." + E.topNavItemClass), A = I
					.hasClass(E.panelClass) ? I : I.closest("." + E.panelClass), F;
			r.call(this, true);
			if (G) {
				D = C
						.find(
								"." + E.topNavItemClass + " ." + E.openClass
										+ ":first").closest(
								"." + E.topNavItemClass);
				if (!(D.is(B.relatedTarget) || D.has(B.relatedTarget).length > 0)) {
					if ((B.type === "mouseout" || B.type === "focusout")
							&& D.has(h.activeElement).length > 0) {
						return
					}
					D.find("[aria-expanded]").attr("aria-expanded", "false")
							.removeClass(E.openClass)
							.filter("." + E.panelClass).attr("aria-hidden",
									"true");
					if ((B.type === "keydown" && B.keyCode === a.ESCAPE)
							|| B.type === "DOMAttrModified") {
						F = D.find(":tabbable:first");
						setTimeout(
								function() {
									C
											.find(
													"[aria-expanded]."
															+ H.settings.panelClass)
											.off(
													"DOMAttrModified.accessible-megamenu");
									F.focus();
									H.justFocused = false
								}, 99)
					}
				} else {
					if (D.length === 0) {
						C.find("[aria-expanded=true]").attr("aria-expanded",
								"false").removeClass(E.openClass).filter(
								"." + E.panelClass).attr("aria-hidden", "true")
					}
				}
			} else {
				clearTimeout(H.focusTimeoutID);
				D.siblings().find("[aria-expanded]").attr("aria-expanded",
						"false").removeClass(E.openClass).filter(
						"." + E.panelClass).attr("aria-hidden", "true");
				D.find("[aria-expanded]").attr("aria-expanded", "true")
						.addClass(E.openClass).filter("." + E.panelClass).attr(
								"aria-hidden", "false");
				if (B.type === "mouseover" && I.is(":tabbable")
						&& D.length === 1 && A.length === 0
						&& C.has(h.activeElement).length > 0) {
					I.focus();
					H.justFocused = false
				}
				r.call(H)
			}
		};
		u = function(C) {
			var D = e(C.target), B = D.closest("."
					+ this.settings.topNavItemClass), A = D.closest("."
					+ this.settings.panelClass);
			if (B.length === 1 && A.length === 0
					&& B.find("." + this.settings.panelClass).length === 1) {
				if (!D.hasClass(this.settings.openClass)) {
					C.preventDefault();
					C.stopPropagation();
					w.call(this, C);
					this.justFocused = false
				} else {
					if (this.justFocused) {
						C.preventDefault();
						C.stopPropagation();
						this.justFocused = false
					} else {
						if (q) {
							C.preventDefault();
							C.stopPropagation();
							w
									.call(this, C, D
											.hasClass(this.settings.openClass))
						}
					}
				}
			}
		};
		y = function(A) {
			if (e(A.target).closest(this.menu).length === 0) {
				A.preventDefault();
				A.stopPropagation();
				w.call(this, A, true)
			}
		};
		v = function(A) {
			if (A.originalEvent.attrName === "aria-expanded"
					&& A.originalEvent.newValue === "false"
					&& e(A.target).hasClass(this.settings.openClass)) {
				A.preventDefault();
				A.stopPropagation();
				w.call(this, A, true)
			}
		};
		m = function(B) {
			clearTimeout(this.focusTimeoutID);
			var C = e(B.target), A = C.closest("." + this.settings.panelClass);
			C.addClass(this.settings.focusClass).on(
					"click.accessible-megamenu", e.proxy(u, this));
			this.justFocused = !this.mouseFocused;
			this.mouseFocused = false;
			if (this.panels.not(A).filter("." + this.settings.openClass).length) {
				w.call(this, B)
			}
		};
		z = function(D) {
			this.justFocused = false;
			var C = this, E = e(D.target), B = E.closest("."
					+ this.settings.topNavItemClass), A = false;
			E.removeClass(this.settings.focusClass).off(
					"click.accessible-megamenu");
			if (g.cvox) {
				C.focusTimeoutID = setTimeout(function() {
					g.cvox.Api.getCurrentNode(function(F) {
						if (B.has(F).length) {
							clearTimeout(C.focusTimeoutID)
						} else {
							C.focusTimeoutID = setTimeout(function(H, I, G) {
								w.call(H, I, G)
							}, 275, C, D, true)
						}
					})
				}, 25)
			} else {
				C.focusTimeoutID = setTimeout(function() {
					w.call(C, D, true)
				}, 300)
			}
		};
		l = function(P) {
			var I = (this.constructor === b) ? this : k(this), S = I.settings, U = e(e(
					this).is("." + S.hoverClass + ":tabbable") ? this
					: P.target), B = I.menu, G = I.topnavitems, M = U
					.closest("." + S.topNavItemClass), A = B.find(":tabbable"), K = U
					.hasClass(S.panelClass) ? U : U.closest("." + S.panelClass), H = K
					.find("." + S.panelGroupClass), R = U.closest("."
					+ S.panelGroupClass), N, D = P.keyCode || P.which, F, Q, O, J, L = false, C = a.keyMap[P.keyCode]
					|| "", E, T = (M.length === 1 && K.length === 0);
			if (U.is("input:focus, select:focus, textarea:focus, button:focus")) {
				return
			}
			if (U.is("." + S.hoverClass + ":tabbable")) {
				e("html").off("keydown.accessible-megamenu")
			}
			switch (D) {
			case a.ESCAPE:
				w.call(I, P, true);
				break;
			case a.DOWN:
				P.preventDefault();
				if (T) {
					w.call(I, P);
					L = (M.find("." + S.panelClass + " :tabbable:first")
							.focus().length === 1)
				} else {
					L = (A.filter(":gt(" + A.index(U) + "):first").focus().length === 1)
				}
				if (!L && g.opera && opera.toString() === "[object Opera]"
						&& (P.ctrlKey || P.metaKey)) {
					A = e(":tabbable");
					Q = A.index(U);
					L = (e(
							":tabbable:gt(" + e(":tabbable").index(U)
									+ "):first").focus().length === 1)
				}
				break;
			case a.UP:
				P.preventDefault();
				if (T && U.hasClass(S.openClass)) {
					w.call(I, P, true);
					N = G.filter(":lt(" + G.index(M) + "):last");
					if (N.children("." + S.panelClass).length) {
						L = (N.children().attr("aria-expanded", "true")
								.addClass(S.openClass).filter(
										"." + S.panelClass).attr("aria-hidden",
										"false").find(":tabbable:last").focus() === 1)
					}
				} else {
					if (!T) {
						L = (A.filter(":lt(" + A.index(U) + "):last").focus().length === 1)
					}
				}
				if (!L && g.opera && opera.toString() === "[object Opera]"
						&& (P.ctrlKey || P.metaKey)) {
					A = e(":tabbable");
					Q = A.index(U);
					L = (e(
							":tabbable:lt(" + e(":tabbable").index(U)
									+ "):first").focus().length === 1)
				}
				break;
			case a.RIGHT:
				P.preventDefault();
				if (T) {
					L = (G.filter(":gt(" + G.index(M) + "):first").find(
							":tabbable:first").focus().length === 1)
				} else {
					if (H.length && R.length) {
						L = (H.filter(":gt(" + H.index(R) + "):first").find(
								":tabbable:first").focus().length === 1)
					}
					if (!L) {
						L = (M.find(":tabbable:first").focus().length === 1)
					}
				}
				break;
			case a.LEFT:
				P.preventDefault();
				if (T) {
					L = (G.filter(":lt(" + G.index(M) + "):last").find(
							":tabbable:first").focus().length === 1)
				} else {
					if (H.length && R.length) {
						L = (H.filter(":lt(" + H.index(R) + "):last").find(
								":tabbable:first").focus().length === 1)
					}
					if (!L) {
						L = (M.find(":tabbable:first").focus().length === 1)
					}
				}
				break;
			case a.TAB:
				Q = A.index(U);
				if (P.shiftKey && T && U.hasClass(S.openClass)) {
					w.call(I, P, true);
					N = G.filter(":lt(" + G.index(M) + "):last");
					if (N.children("." + S.panelClass).length) {
						L = N.children().attr("aria-expanded", "true")
								.addClass(S.openClass).filter(
										"." + S.panelClass).attr("aria-hidden",
										"false").find(":tabbable:last").focus()
					}
				} else {
					if (P.shiftKey && Q > 0) {
						L = (A.filter(":lt(" + Q + "):last").focus().length === 1)
					} else {
						if (!P.shiftKey && Q < A.length - 1) {
							L = (A.filter(":gt(" + Q + "):first").focus().length === 1)
						} else {
							if (g.opera
									&& opera.toString() === "[object Opera]") {
								A = e(":tabbable");
								Q = A.index(U);
								if (P.shiftKey) {
									L = (e(
											":tabbable:lt("
													+ e(":tabbable").index(U)
													+ "):last").focus().length === 1)
								} else {
									L = (e(
											":tabbable:gt("
													+ e(":tabbable").index(U)
													+ "):first").focus().length === 1)
								}
							}
						}
					}
				}
				if (L) {
					P.preventDefault()
				}
				break;
			case a.SPACE:
				if (T) {
					P.preventDefault();
					u.call(I, P)
				} else {
					return true
				}
				break;
			case a.ENTER:
				return true;
				break;
			default:
				clearTimeout(this.keydownTimeoutID);
				p += C !== p ? C : "";
				if (p.length === 0) {
					return
				}
				this.keydownTimeoutID = setTimeout(function() {
					p = ""
				}, s);
				if (T && !U.hasClass(S.openClass)) {
					A = A.filter(":not(." + S.panelClass + " :tabbable)")
				} else {
					A = M.find(":tabbable")
				}
				if (P.shiftKey) {
					A = e(A.get().reverse())
				}
				for (Q = 0; Q < A.length; Q++) {
					O = A.eq(Q);
					if (O.is(U)) {
						F = (p.length === 1) ? Q + 1 : Q;
						break
					}
				}
				E = new RegExp("^"
						+ p.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), "i");
				for (Q = F; Q < A.length; Q++) {
					O = A.eq(Q);
					J = e.trim(O.text());
					if (E.test(J)) {
						L = true;
						O.focus();
						break
					}
				}
				if (!L) {
					for (Q = 0; Q < F; Q++) {
						O = A.eq(Q);
						J = e.trim(O.text());
						if (E.test(J)) {
							O.focus();
							break
						}
					}
				}
				break
			}
			I.justFocused = false
		};
		n = function(A) {
			if (e(A.target).is(":focusable, ." + this.settings.panelClass)) {
				this.mouseFocused = true
			}
			this.mouseTimeoutID = setTimeout(function() {
				clearTimeout(this.focusTimeoutID)
			}, 1)
		};
		x = function(A) {
			clearTimeout(this.mouseTimeoutID);
			e(A.target).addClass(this.settings.hoverClass);
			w.call(this, A);
			if (e(A.target).is(":tabbable")) {
				e("html").on("keydown.accessible-megamenu",
						e.proxy(l, A.target))
			}
		};
		o = function(B) {
			var A = this;
			e(B.target).removeClass(A.settings.hoverClass);
			A.mouseTimeoutID = setTimeout(function() {
				w.call(A, B, true)
			}, 250);
			if (e(B.target).is(":tabbable")) {
				e("html").off("keydown.accessible-megamenu")
			}
		};
		r = function(A) {
			var B = this.menu;
			if (A) {
				e("html")
						.off(
								"mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu");
				B.find("[aria-expanded]." + this.settings.panelClass).off(
						"DOMAttrModified.accessible-megamenu")
			} else {
				e("html")
						.on(
								"mouseup.outside-accessible-megamenu, touchend.outside-accessible-megamenu, mspointerup.outside-accessible-megamenu,  pointerup.outside-accessible-megamenu",
								e.proxy(y, this));
				B.find("[aria-expanded=true]." + this.settings.panelClass)
						.on("DOMAttrModified.accessible-megamenu",
								e.proxy(v, this))
			}
		};
		return {
			constructor : b,
			init : function() {
				var C = this, B = this.settings, E = this.nav = e(this.element), D = this.menu = E
						.children().first(), A = this.topnavitems = D
						.children();
				E.attr("role", "navigation");
				D.addClass(B.menuClass);
				A.each(function(H, G) {
					var F, I;
					G = e(G);
					G.addClass(B.topNavItemClass);
					F = G.find(":tabbable:first");
					I = G.children(":not(:tabbable):last");
					t.call(C, F);
					if (I.length) {
						t.call(C, I);
						F.attr({
							"aria-haspopup" : true,
							"aria-controls" : I.attr("id"),
							"aria-expanded" : false
						});
						I.attr({
							role : "group",
							"aria-expanded" : false,
							"aria-hidden" : true
						}).addClass(B.panelClass).not("[aria-labelledby]")
								.attr("aria-labelledby", F.attr("id"))
					}
				});
				this.panels = D.find("." + B.panelClass);
				D.on("focusin.accessible-megamenu",
						":focusable, ." + B.panelClass, e.proxy(m, this)).on(
						"focusout.accessible-megamenu",
						":focusable, ." + B.panelClass, e.proxy(z, this)).on(
						"keydown.accessible-megamenu", e.proxy(l, this)).on(
						"mouseover.accessible-megamenu", e.proxy(x, this)).on(
						"mouseout.accessible-megamenu", e.proxy(o, this)).on(
						"mousedown.accessible-megamenu", e.proxy(n, this));
				if (q) {
					D.on("touchstart.accessible-megamenu", e.proxy(u, this))
				}
				D.find("hr").attr("role", "separator");
				if (e(h.activeElement).closest(D).length) {
					e(h.activeElement).trigger("focusin.accessible-megamenu")
				}
			},
			getDefaults : function() {
				return this._defaults
			},
			getOption : function(A) {
				return this.settings[A]
			},
			getAllOptions : function() {
				return this.settings
			},
			setOption : function(B, C, A) {
				this.settings[B] = C;
				if (A) {
					this.init()
				}
			}
		}
	}());
	e.fn[f] = function(j) {
		return this.each(function() {
			if (!e.data(this, "plugin_" + f)) {
				e.data(this, "plugin_" + f, new b(this, j))
			}
		})
	};
	function c(j) {
		return e.expr.filters.visible(j)
				&& !e(j).parents().addBack().filter(function() {
					return e.css(this, "visibility") === "hidden"
				}).length
	}
	function i(l, j) {
		var n, m, k, o = l.nodeName.toLowerCase();
		if ("area" === o) {
			n = l.parentNode;
			m = n.name;
			if (!l.href || !m || n.nodeName.toLowerCase() !== "map") {
				return false
			}
			k = e("img[usemap=#" + m + "]")[0];
			return !!k && c(k)
		}
		return (/input|select|textarea|button|object/.test(o) ? !l.disabled
				: "a" === o ? l.href || j : j)
				&& c(l)
	}
	e.extend(e.expr[":"], {
		data : e.expr.createPseudo ? e.expr.createPseudo(function(j) {
			return function(k) {
				return !!e.data(k, j)
			}
		}) : function(l, k, j) {
			return !!e.data(l, j[3])
		},
		focusable : function(j) {
			return i(j, !isNaN(e.attr(j, "tabindex")))
		},
		tabbable : function(l) {
			var j = e.attr(l, "tabindex"), k = isNaN(j);
			return (k || j >= 0) && i(l, !k)
		}
	})
}(jQuery, window, document));